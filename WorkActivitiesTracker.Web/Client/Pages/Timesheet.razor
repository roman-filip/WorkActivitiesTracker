@page "/timesheet"
@using WorkActivitiesTracker.Web.Shared

<h1>Timesheet</h1>

<div>
    <button type="button" class="btn btn-success btn-sm m-1" @onclick="PrevMonth">&lt;</button>
    <button type="button" class="btn btn-success btn-sm" @onclick="NextMonth">&gt;</button>
    <b class="m-1">@_selectedTimesheet.Date.ToString("MMMM yyyy")</b>
</div>

<div>
    <button type="button" class="btn btn-primary m-1" @onclick="OnStartWork">Start Work</button>
    <button type="button" class="btn btn-primary m-1" @onclick="OnStopWork">Stop Work</button>
</div>

<table class="table table-striped m-1">
    <thead class="thead-dark">
        <tr>
            <th>Date</th>
            <th>Start time</th>
            <th>End time</th>
            <th>Duration</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var entry in _selectedTimesheet.Entries)
        {
            <tr>
                <td>@entry.StartTime.Value.ToString("dd.MM.yyyy dddd")</td>
                <td>@entry.StartTime.Value.ToLongTimeString()</td>
                <td>@entry.EndTime?.ToLongTimeString()</td>
                <td>@((entry.EndTime ?? DateTime.Now) - entry.StartTime.Value)</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<WorkActivitiesTracker.Web.Shared.Models.Timesheet> _timesheets;
    private WorkActivitiesTracker.Web.Shared.Models.Timesheet _selectedTimesheet;
    private int _monthIndex;


    protected override Task OnInitializedAsync()
    {
        _timesheets = new List<Web.Shared.Models.Timesheet>
{
            new WorkActivitiesTracker.Web.Shared.Models.Timesheet
            {
                Date = DateTime.Now,
                Entries = new List<Web.Shared.Models.TimesheetEntry>
{
                    new Web.Shared.Models.TimesheetEntry { StartTime = DateTime.Now.AddDays(-1).AddHours(-3), EndTime = DateTime.Now.AddDays(1).AddHours(5)},
                    new Web.Shared.Models.TimesheetEntry { StartTime = DateTime.Now.AddDays(-2).AddHours(-2), EndTime = DateTime.Now.AddDays(2).AddHours(5.5)},
                    new Web.Shared.Models.TimesheetEntry { StartTime = DateTime.Now.AddDays(-3).AddHours(-1), EndTime = DateTime.Now.AddDays(3).AddHours(6.75)},
                    new Web.Shared.Models.TimesheetEntry { StartTime = DateTime.Now.AddDays(-4).AddHours(0), EndTime = DateTime.Now.AddDays(4).AddHours(8.9)},
                    new Web.Shared.Models.TimesheetEntry { StartTime = DateTime.Now.AddDays(-5).AddHours(-4), EndTime = DateTime.Now.AddHours(4)}
                }
            },
            new WorkActivitiesTracker.Web.Shared.Models.Timesheet
            {
                Date = DateTime.Now.AddMonths(-1),
                Entries = new List<Web.Shared.Models.TimesheetEntry>
{
                    new Web.Shared.Models.TimesheetEntry { StartTime = DateTime.Now.AddMonths(-1).AddHours(-4), EndTime = DateTime.Now.AddMonths(-1).AddHours(4)},
                    new Web.Shared.Models.TimesheetEntry { StartTime = DateTime.Now.AddMonths(-1).AddDays(1).AddHours(-3), EndTime = DateTime.Now.AddMonths(-1).AddDays(1).AddHours(5)}
                }
            },
            new WorkActivitiesTracker.Web.Shared.Models.Timesheet
            {
                Date = DateTime.Now.AddMonths(-2),
                Entries = new List<Web.Shared.Models.TimesheetEntry>
{
                    new Web.Shared.Models.TimesheetEntry { StartTime = DateTime.Now.AddMonths(-2).AddHours(-4), EndTime = DateTime.Now.AddMonths(-2).AddHours(4)},
                }
            }
        };

        _selectedTimesheet = _timesheets[_monthIndex];

        return base.OnInitializedAsync();
    }

    private void PrevMonth()
    {
        _selectedTimesheet = _timesheets[++_monthIndex];
    }

    private void NextMonth()
    {
        _selectedTimesheet = _timesheets[--_monthIndex];
    }

    private void OnStartWork()
    {
        _timesheets[0].Entries.Insert(0, new Web.Shared.Models.TimesheetEntry { StartTime = DateTime.Now });
    }

    private void OnStopWork()
    {
        _timesheets[0].Entries[0].EndTime = DateTime.Now;
    }
}
